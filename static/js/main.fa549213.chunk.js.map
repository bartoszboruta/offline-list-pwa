{"version":3,"sources":["components/Todo/Context.js","components/Todo/Add.js","components/Todo/Filters/NameFilter.js","components/Header.js","components/Todo/Todo.js","components/Todo/List.js","utils/db.js","components/Todo/index.js","App.js","serviceWorker.js","index.js"],"names":["TodoContext","React","createContext","active","done","filteredTodos","nameFilter","onAddTodo","onChangeNameFilter","onRemoveTodo","onToggle","onUpdateTodo","showAddField","showNameFilter","todos","Add","useContext","_useState","useState","_useState2","Object","slicedToArray","title","setTitle","react_default","a","createElement","className","onChange","_ref","value","target","placeholder","disabled","onClick","NameFilter","_useContext","Header","searchClassName","classnames","addClassName","Todo","todo","updatedAt","titleClassName","checked","checkboxClassName","Date","toLocaleDateString","type","List","map","components_Todo_Todo","key","id","db","Dexie","version","stores","Container","state","localStorage","getItem","componentDidMount","_this","_getTodos","table","toArray","then","setState","sort","prev","next","_updateCounter","_applyFilters","_handleAddTodo","createdAt","add","_handleUpdateTodo","update","_handleRemoveTodo","_ref2","delete","_this$state","filter","_ref3","toLowerCase","includes","_handleNameFilterChange","_ref4","setItem","_handleToggle","toggleName","_toggleValue","defineProperty","length","_this$state2","this","Provider","components_Header","Filters_NameFilter","Todo_Add","Todo_List","Component","App","components_Todo","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App","document","getElementById","URL","process","href","origin","addEventListener","concat","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.fa549213.chunk.js","sourcesContent":["import React from 'react'\n\nexport const TodoContext = React.createContext({\n  active: 0,\n  done: 0,\n  filteredTodos: [],\n  nameFilter: '',\n  onAddTodo: () => {},\n  onChangeNameFilter: () => {},\n  onRemoveTodo: () => {},\n  onToggle: () => {},\n  onUpdateTodo: () => {},\n  showAddField: '',\n  showNameFilter: '',\n  todos: [],\n})\n","import React, { useContext, useState } from 'react'\n\nimport { TodoContext } from './Context'\n\nconst Add = () => {\n  const { onAddTodo } = useContext(TodoContext)\n  const [title, setTitle] = useState('')\n\n  return (\n    <div className=\"add\">\n      <div className=\"group\">\n        <input\n          onChange={({ target: { value } }) => setTitle(value)}\n          placeholder=\"New task\"\n          title=\"title\"\n          value={title}\n        />\n        <span className=\"highlight\" />\n        <span className=\"bar\" />\n      </div>\n\n      <button\n        className=\"btn\"\n        disabled={!title}\n        onClick={() => {\n          setTitle('')\n          onAddTodo(title)\n        }}\n      >\n        Add\n      </button>\n    </div>\n  )\n}\n\nexport default Add\n","import React, { useContext } from 'react'\n\nimport { TodoContext } from '../Context'\n\nconst NameFilter = () => {\n  const { onChangeNameFilter, nameFilter } = useContext(TodoContext)\n\n  return (\n    <div className=\"nameFilter\">\n      <div className=\"group\">\n        <input onChange={onChangeNameFilter} placeholder=\"Search\" value={nameFilter} />\n        <span className=\"highlight\" />\n        <span className=\"bar\" />\n      </div>\n    </div>\n  )\n}\n\nexport default NameFilter\n","import React, { useContext } from 'react'\nimport classnames from 'classnames'\n\nimport { TodoContext } from './Todo/Context'\n\nconst Header = () => {\n  const { showNameFilter, showAddField, onToggle } = useContext(TodoContext)\n  const searchClassName = classnames('fa fa-search icon', {\n    active: showNameFilter,\n  })\n  const addClassName = classnames('fa fa-plus icon', {\n    active: showAddField,\n  })\n\n  return (\n    <div className=\"header\">\n      <i className={searchClassName} onClick={() => onToggle('showNameFilter')} />\n      <i>Tasks</i>\n      <i className={addClassName} onClick={() => onToggle('showAddField')} />\n    </div>\n  )\n}\n\nexport default Header\n","import React, { useContext } from 'react'\nimport classnames from 'classnames'\n\nimport { TodoContext } from './Context'\n\nconst Todo = ({ todo }) => {\n  const { onRemoveTodo, onUpdateTodo } = useContext(TodoContext)\n  const { done, title, updatedAt } = todo\n  const titleClassName = classnames('todo__title', {\n    checked: done,\n  })\n\n  const checkboxClassName = classnames('fa fa-check-circle', {\n    checked: done,\n  })\n\n  return (\n    <div className=\"todo\">\n      <div className=\"todo__date\">{new Date(updatedAt).toLocaleDateString()}</div>\n      <div className=\"todo__container\">\n        <i className=\"todo__remove fa fa-minus-circle\" onClick={onRemoveTodo(todo)} />\n        <div className={titleClassName}>{title}</div>\n        <div className=\"todo__input\">\n          <label className=\"label\">\n            <input\n              checked={done}\n              className=\"label__checkbox\"\n              onChange={onUpdateTodo(todo)}\n              type=\"checkbox\"\n            />\n            <i className={checkboxClassName} />\n          </label>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default Todo\n","import React, { useContext } from 'react'\n\nimport Todo from './Todo'\nimport { TodoContext } from './Context'\n\nconst List = () => {\n  const { filteredTodos } = useContext(TodoContext)\n\n  return <div className=\"list\">{filteredTodos.map(todo => <Todo key={todo.id} todo={todo} />)}</div>\n}\n\nexport default List\n","import Dexie from 'dexie'\n\nconst db = new Dexie('TodoList')\ndb.version(1).stores({ todos: '++id' })\n\nexport default db\n","import React, { Component } from 'react'\n\nimport Add from './Add'\nimport NameFilter from './Filters/NameFilter'\nimport Header from '../Header'\nimport List from './List'\nimport db from '../../utils/db'\nimport { TodoContext } from './Context'\n\nclass Container extends Component {\n  state = {\n    active: 0,\n    done: 0,\n    filteredTodos: [],\n    nameFilter: localStorage.getItem('nameFilter') || '',\n    showAddField: localStorage.getItem('showAddField') === 'true' ? true : false,\n    showNameFilter: localStorage.getItem('showNameFilter') === 'true' ? true : false,\n    todos: [],\n  }\n\n  componentDidMount = () => {\n    this._getTodos()\n  }\n\n  _getTodos = () => {\n    db\n      .table('todos')\n      .toArray()\n      .then(todos => {\n        this.setState(\n          {\n            todos: todos.sort((prev, next) => {\n              return next.id - prev.id\n            }),\n          },\n          () => {\n            this._updateCounter()\n            this._applyFilters()\n          },\n        )\n      })\n  }\n\n  _handleAddTodo = title => {\n    const todo = {\n      createdAt: new Date(),\n      done: false,\n      updatedAt: new Date(),\n      title,\n    }\n\n    db\n      .table('todos')\n      .add(todo)\n      .then(this._getTodos)\n  }\n\n  _handleUpdateTodo = ({ done, id }) => () => {\n    db\n      .table('todos')\n      .update(id, { done: !done, updatedAt: new Date() })\n      .then(this._getTodos)\n  }\n\n  _handleRemoveTodo = ({ id }) => () => {\n    db\n      .table('todos')\n      .delete(id)\n      .then(this._getTodos)\n  }\n\n  _applyFilters = () => {\n    const { nameFilter, todos } = this.state\n    const filteredTodos = todos.filter(({ title }) => {\n      return title.toLowerCase().includes(nameFilter.toLowerCase())\n    })\n\n    this.setState({ filteredTodos })\n  }\n\n  _handleNameFilterChange = ({ target: { value } }) => {\n    this.setState({ nameFilter: value }, () => {\n      localStorage.setItem('nameFilter', value)\n      this._applyFilters()\n    })\n  }\n\n  _handleToggle = toggleName => {\n    if (!toggleName) {\n      return\n    }\n\n    const _toggleValue = this.state[toggleName]\n\n    this.setState({ [toggleName]: !_toggleValue }, () => {\n      localStorage.setItem(toggleName, !_toggleValue)\n\n      if (toggleName === 'showNameFilter' && _toggleValue) {\n        this._handleNameFilterChange({ target: { value: '' } })\n      }\n    })\n  }\n\n  _updateCounter = () => {\n    const { filteredTodos } = this.state\n    const active = filteredTodos.filter(todo => !todo.done).length\n    const done = filteredTodos.filter(todo => todo.done).length\n\n    this.setState({ active, done })\n  }\n\n  render() {\n    const { nameFilter, todos, filteredTodos, showNameFilter, showAddField } = this.state\n\n    return (\n      <TodoContext.Provider\n        value={{\n          filteredTodos,\n          nameFilter,\n          onAddTodo: this._handleAddTodo,\n          onChangeNameFilter: this._handleNameFilterChange,\n          onRemoveTodo: this._handleRemoveTodo,\n          onToggle: this._handleToggle,\n          onUpdateTodo: this._handleUpdateTodo,\n          showAddField,\n          showNameFilter,\n          todos,\n        }}\n      >\n        <Header />\n        <div className=\"container\">\n          <div>\n            {showNameFilter && <NameFilter />}\n            {showAddField && <Add />}\n          </div>\n          <List />\n        </div>\n      </TodoContext.Provider>\n    )\n  }\n}\n\nexport default Container\n","import React, { Component } from 'react'\n\nimport Todo from './components/Todo'\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Todo />\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './styles/index.css'\nimport 'font-awesome/css/font-awesome.min.css'\n\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register()\n"],"sourceRoot":""}